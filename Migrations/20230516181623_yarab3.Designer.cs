// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bibliotheque.Data;

#nullable disable

namespace Cart_biblio.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230516181623_yarab3")]
    partial class yarab3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cart_biblio.Models.Bridge", b =>
                {
                    b.Property<string>("book_name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nationalId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("book_name", "nationalId");

                    b.HasIndex("nationalId");

                    b.ToTable("Bridges");
                });

            modelBuilder.Entity("Cart_biblio.Models.CartItem", b =>
                {
                    b.Property<int>("cartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cartItemId"));

                    b.Property<int?>("CartscartId")
                        .HasColumnType("int");

                    b.Property<string>("book_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userNationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cartItemId");

                    b.HasIndex("CartscartId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("Cart_biblio.Models.Carts", b =>
                {
                    b.Property<int>("cartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cartId"));

                    b.Property<string>("RegisterModelnationalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("book_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("book_name1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("cartId");

                    b.HasIndex("RegisterModelnationalId");

                    b.HasIndex("book_name1");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("bibliotheque.Models.Book", b =>
                {
                    b.Property<string>("book_name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("book_pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("borrowable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("book_name");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("bibliotheque.Models.Client", b =>
                {
                    b.Property<string>("national_id")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("client_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("home_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("national_id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("bibliotheque.Models.Operation", b =>
                {
                    b.Property<int>("operation_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("operation_id"));

                    b.Property<string>("book_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("national_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("operation_id");

                    b.HasIndex("book_name");

                    b.HasIndex("national_id");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("bibliotheque.Models.RegisterModel", b =>
                {
                    b.Property<string>("nationalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("confirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("homeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("nationalId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Cart_biblio.Models.Bridge", b =>
                {
                    b.HasOne("bibliotheque.Models.Book", "book")
                        .WithMany("Bridge")
                        .HasForeignKey("book_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bibliotheque.Models.RegisterModel", "userNationalId")
                        .WithMany("Bridge")
                        .HasForeignKey("nationalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("userNationalId");
                });

            modelBuilder.Entity("Cart_biblio.Models.CartItem", b =>
                {
                    b.HasOne("Cart_biblio.Models.Carts", null)
                        .WithMany("Items")
                        .HasForeignKey("CartscartId");
                });

            modelBuilder.Entity("Cart_biblio.Models.Carts", b =>
                {
                    b.HasOne("bibliotheque.Models.RegisterModel", null)
                        .WithMany("Carts")
                        .HasForeignKey("RegisterModelnationalId");

                    b.HasOne("bibliotheque.Models.Book", "book")
                        .WithMany()
                        .HasForeignKey("book_name1");

                    b.Navigation("book");
                });

            modelBuilder.Entity("bibliotheque.Models.Operation", b =>
                {
                    b.HasOne("bibliotheque.Models.Book", "Book")
                        .WithMany("Operations")
                        .HasForeignKey("book_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bibliotheque.Models.Client", "Client")
                        .WithMany("Operations")
                        .HasForeignKey("national_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Cart_biblio.Models.Carts", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("bibliotheque.Models.Book", b =>
                {
                    b.Navigation("Bridge");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("bibliotheque.Models.Client", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("bibliotheque.Models.RegisterModel", b =>
                {
                    b.Navigation("Bridge");

                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
